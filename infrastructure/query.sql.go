// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package infrastructure

import (
	"context"
)

const crateUser = `-- name: CrateUser :one
insert into users(id, first_name, last_name)
values(?, ?, ?)
returning id, first_name, last_name
`

type CrateUserParams struct {
	ID        string
	FirstName string
	LastName  string
}

func (q *Queries) CrateUser(ctx context.Context, arg CrateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, crateUser, arg.ID, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
delete from users where id = ? returning id, first_name, last_name
`

func (q *Queries) DeleteUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, id)
	var i User
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const findUser = `-- name: FindUser :one
select id, first_name, last_name from users where id = ?
`

func (q *Queries) FindUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, id)
	var i User
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const findUserByName = `-- name: FindUserByName :one
select id, first_name, last_name from users where first_name = ? and last_name = ?
`

type FindUserByNameParams struct {
	FirstName string
	LastName  string
}

func (q *Queries) FindUserByName(ctx context.Context, arg FindUserByNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByName, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}

const updateUserName = `-- name: UpdateUserName :one
update users set first_name = ?, last_name = ? where id = ? returning id, first_name, last_name
`

type UpdateUserNameParams struct {
	FirstName string
	LastName  string
	ID        string
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserName, arg.FirstName, arg.LastName, arg.ID)
	var i User
	err := row.Scan(&i.ID, &i.FirstName, &i.LastName)
	return i, err
}
